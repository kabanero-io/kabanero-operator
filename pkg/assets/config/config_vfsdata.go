// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 21, 0, 41, 55, 959318519, time.UTC),
		},
		"/components.yaml": &vfsgen۰CompressedFileInfo{
			name:             "components.yaml",
			modTime:          time.Date(2019, 7, 30, 17, 44, 17, 333534495, time.UTC),
			uncompressedSize: 718,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8e\xdb\x30\x0c\x44\xef\xfa\x8a\x01\x7c\xcd\x1a\x69\x7b\xf3\x2f\x14\x6d\x2f\x05\x7a\x56\x24\x7a\x2d\x44\x16\x55\x89\x4a\xb0\x7f\x5f\x50\x5e\x3b\x9b\x9e\xf6\x28\x0e\x39\x7c\x1c\x0d\xf8\x61\x73\xc5\x77\x7b\xb1\x89\x0a\x23\x47\x2b\x33\x97\x15\x85\x6e\xa1\x06\x4e\x15\xc2\x28\x14\xad\x90\x87\xe3\x35\x73\xa2\x24\x0f\xd9\x0c\x68\xc9\x53\xa9\xc2\xec\x71\x79\x83\x2c\x04\x96\x85\x0a\x38\x53\xb1\xc2\xa5\x8e\x30\x66\xc0\x4f\x16\xea\xea\xcc\x31\xf2\x3d\xa4\x57\x54\xfa\xdb\x28\x39\x9a\x7a\xfd\x80\xd8\x07\x71\x21\xc7\x2b\x55\xd8\xbb\x2d\x64\x06\xf0\x0c\x8b\x44\x77\xdc\xa8\xe8\x76\x2d\x3c\x4d\xee\xf8\x27\x84\x84\x6c\x8b\x28\x11\xf9\x20\xba\x4d\x96\x50\x31\x87\xa8\x4e\xbf\x92\xdb\x60\x0e\x48\xd8\x42\x28\x1c\x23\x79\x70\x93\x53\x57\xad\x5f\x43\x0a\x55\x36\x1c\x67\x13\xdc\xc2\x5c\x49\x43\x69\x55\x8d\xb4\x4b\x89\x0e\x84\x1d\xed\x69\xf1\x07\xc4\x42\x95\x5b\x71\x34\xe2\xb7\xf2\x38\xdb\x2a\x69\x8a\x5b\x66\xbb\xda\x63\xbf\x10\x5a\xf6\x3d\xf9\x56\x8f\x0b\x56\x9b\x73\x48\xaf\xc6\x1c\x7f\x30\x19\x03\x0c\xf8\xb3\x50\xea\xbb\x76\x13\x78\xa6\x8a\xc4\x82\x9a\xc9\x85\xf9\x0d\xf7\x25\xb8\xe5\xf1\xc9\xef\xac\x27\xbd\x65\x33\xbf\xd9\xd8\xa8\xbb\x75\xba\xba\x70\x8b\x5e\x41\xae\x94\x05\x2d\x2b\x96\x12\x19\xc0\xb5\x52\x28\xc9\x64\x00\xe0\xfa\x7e\xde\x84\xf3\x78\x1e\xbf\x40\x89\x5e\xfe\xaf\xf6\x4e\xa1\xab\x70\x9a\xd0\x1f\xd8\x11\xb4\xe3\x5b\xef\x78\x4c\xbd\x7c\xd0\xce\xe3\xd7\x4f\x4c\xff\x0b\x00\x00\xff\xff\x04\xdf\xf0\xaa\xce\x02\x00\x00"),
		},
		"/reconciler": &vfsgen۰DirInfo{
			name:    "reconciler",
			modTime: time.Date(2019, 8, 23, 19, 45, 29, 890913515, time.UTC),
		},
		"/reconciler/appsody-operator": &vfsgen۰DirInfo{
			name:    "appsody-operator",
			modTime: time.Date(2019, 8, 23, 19, 45, 29, 726914951, time.UTC),
		},
		"/reconciler/appsody-operator/appsody-0.1.0.yaml": &vfsgen۰CompressedFileInfo{
			name:             "appsody-0.1.0.yaml",
			modTime:          time.Date(2019, 8, 23, 19, 45, 29, 726914951, time.UTC),
			uncompressedSize: 7526,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa4\x0f\xdb\x16\xb5\xf6\xd2\xe0\x0e\x85\x81\x43\xeb\x3a\x7b\x6d\x7a\x97\xac\x61\x6f\xae\x28\x8a\xe2\x30\xa6\xc6\x36\xbb\x14\xa9\x92\x43\x5f\x9c\xa2\xdf\xbd\x20\x29\x59\x96\x25\xf9\x4f\x2e\xe1\x93\x4d\x72\x66\x7e\x9c\x7f\x1c\x8e\xb0\x94\x3f\x92\x75\xd2\xe8\x09\x60\x29\xe9\x03\x93\x0e\xff\x5c\xf6\xfc\x07\x97\x49\x73\xbf\x7b\xb9\x22\xc6\x97\xa3\x67\xa9\xf3\x09\xcc\xbc\x63\x53\x2c\xc8\x19\x6f\x05\xbd\xa6\xb5\xd4\x92\xa5\xd1\xa3\x82\x18\x73\x64\x9c\x8c\x00\x34\x16\x14\xb8\x95\xce\xe4\x7b\x2c\x4b\x25\x05\x72\xe4\x59\xcd\x65\x39\xed\x46\xae\x24\x11\x76\x63\x9e\x47\x16\xa8\xe6\x56\x6a\x26\x3b\x33\xca\x17\xda\x85\xb5\x31\xfc\x6d\xf9\xf8\x6e\x8e\xbc\x9d\x40\x16\x08\xb2\x23\x76\x6f\x0a\xdc\xd0\x08\x00\x20\x27\x27\xac\x2c\x39\x9e\x62\xba\x72\x46\x79\xa6\x08\x03\xcc\x1a\x78\x4b\x90\x53\xa9\xcc\x9e\x72\x90\x81\x08\x84\xd1\x8c\x52\x4b\xbd\x01\x4b\x1b\xe9\xd8\xee\x01\x75\x0e\x8c\x9b\xc8\x30\x9d\xa0\x11\xc0\xfb\x92\x26\xe0\xd8\x4a\xbd\xe9\x85\x45\x1f\x4a\xe3\x7a\xc0\x2c\x4b\x12\x72\x2d\xc9\xc1\xcf\x5b\xe2\x2d\xd9\x0a\x49\x41\x9a\x41\x3a\x48\x74\x39\x04\xbd\x5b\x8d\x4a\xed\x61\x27\x11\x72\x5a\xa3\x57\x0c\x0b\xe3\x99\x8e\x10\x3d\xa4\xed\x47\x98\x56\xc6\x28\x42\xdd\x01\xc5\xc8\xde\x65\xc2\xe8\xa4\x5c\xf7\xcf\x3f\xfe\xfa\x4f\x59\x20\xf9\xf6\xdb\xbb\x05\x09\xa3\x85\x54\x94\xdf\xfd\xe6\x5f\xd5\xd6\x1e\xe8\x71\xbe\x56\xa0\xad\x69\xe0\xc0\xf3\x08\x57\xc3\xf1\xb2\xba\xae\x47\x66\x09\x5d\x25\xa6\x85\x6c\x11\xe7\x61\x6d\x6c\x84\xb6\x46\xa9\xbc\x8d\xa6\xbe\x84\xf2\xc0\xaf\xb4\xd2\x58\xc9\xfb\x09\xbc\xfc\x9c\x88\x0b\x72\xae\xd7\x29\xbf\xab\x30\x56\x1b\x60\x6d\x4d\x71\x01\xed\xdb\x23\x5e\xb7\xc0\xad\x23\x31\x13\x96\x62\x9c\x3c\xc9\x82\x1c\x63\x51\xf6\xc4\xca\x86\x1a\x03\xa7\x98\x3e\x42\x30\x6d\x79\x7f\x8e\xd1\x15\x37\xd6\xf8\xf2\x10\xdd\x31\x92\xd3\xfe\x18\xb0\x00\x29\x4f\x4c\xd3\xf2\xb4\x89\xd6\xb8\xa8\xa4\xe3\xef\x07\x36\xfc\x20\x1d\xa7\xc3\x2a\x6f\x51\xf5\x26\x90\xb8\xee\xa4\xde\x78\x85\xb6\x6f\xc7\x08\xc0\x09\x13\xe0\xbe\x0b\x90\x4a\x14\xd1\x25\x9d\x5f\xd5\xe7\xab\x60\x26\xa3\x4e\xe0\xbf\xff\x1b\x01\xec\x50\xc9\x3c\xd2\xa7\x45\x53\x92\x9e\xce\xdf\xfc\xf8\x6a\x29\xb6\x54\x60\x9a\x0c\x56\x30\x25\x59\x96\x35\x8f\x30\x8e\xf2\xe7\x61\xee\x44\xc9\x77\x81\x55\xda\x13\x02\x5b\x6a\x72\x51\xe3\xbb\x34\x47\x39\xb8\x28\x26\x59\x42\x3a\xb0\x54\x5a\x72\xa4\xb9\x51\x5c\x3d\xcc\x1a\x50\x83\x59\xfd\x9b\x04\x67\xb0\x24\x1b\x98\x80\xdb\x1a\xaf\xf2\xe0\x45\x3b\xb2\x1c\xfd\x6a\xa3\xe5\xc7\x03\x67\x07\x6c\xa2\x48\x85\x4c\x95\x96\xeb\x11\x53\xae\x46\x15\x94\xe0\xe9\x77\x31\x0d\x16\xb8\x07\x4b\x41\x06\x78\x7d\xc4\x2d\x6e\x71\x19\xbc\x35\x96\x40\xea\xb5\x99\xc0\x96\xb9\x74\x93\xfb\xfb\x8d\xe4\xfa\xc6\x10\xa6\x28\xbc\x96\xbc\xbf\x0f\x69\xd6\xca\x95\x67\x63\xdd\x7d\x4e\x3b\x52\xf7\x58\xca\x71\xc4\xa9\xd3\x8d\x50\xe4\xbf\x3a\x58\xe6\xee\x08\xd8\x89\x87\xa7\x11\x7d\x6b\x50\xcd\xc1\xb1\x42\x4e\xc5\x8a\x2c\xc1\x6d\xb4\x19\xa6\x82\x12\x16\x0f\xcb\xa7\x83\xbb\x47\x8d\xb7\x55\x1c\x95\xdb\x90\xb9\x46\xcf\x41\x2f\x52\xaf\xc9\x26\x3b\xc5\x20\x0e\x1c\x49\xe7\xa5\x91\x9a\xe3\x1f\xa1\x24\xe9\xb6\x8e\x9d\x5f\x15\x92\x83\x61\xff\xe3\xc9\x71\x30\x47\x06\x33\xd4\xda\x30\xac\x08\x7c\x19\x62\x2b\xcf\xe0\x8d\x86\x19\x16\xa4\x66\xe8\xe8\x73\x6b\x39\x28\xd4\x8d\x83\x06\x2f\xeb\xf9\xf8\x32\x6f\x6f\x4c\xca\x39\x4c\xd7\x77\x78\x3d\xfa\x22\x24\x45\x49\xfb\xd6\x6e\xaf\x0e\xa0\x88\x84\x56\x6c\x25\x93\x60\x6f\x3b\x44\x92\xa9\x70\xa7\x93\x67\x78\xd5\x4b\x68\x2d\xee\xdb\x52\x3c\x1b\x27\x50\x49\xbd\x39\xe5\x37\x74\xa2\xa8\x26\xfc\xb0\xa0\x78\xb0\x9e\x45\x08\xf7\x53\x81\x3c\x09\x11\xf6\xea\xf7\x3d\xeb\x85\xd4\xb2\xf0\x45\x9d\xd3\xfb\xa0\x86\xe0\xdc\x90\xed\x4a\x96\xfa\x97\x48\x3e\xcf\x9c\xd1\x6e\x88\x67\xf3\xf7\xef\x59\x2a\xf9\x31\x5a\x6d\x4e\x56\x84\x84\xd4\x35\xdd\x2f\x95\xd7\xeb\x57\x61\xc4\xeb\x8b\xbe\xd7\xc8\x72\x47\x21\x02\xa5\x18\xf0\x9b\xa6\x06\x6a\x06\xe9\xdd\x4d\xfe\xd2\x03\x60\xd8\x5f\x48\xef\xbe\xb3\xa6\xf8\x82\x02\x62\x9d\x77\xfd\x69\x95\xdc\x91\x26\xe7\xe6\xd6\xac\x06\xc8\x7a\xe4\x97\x5e\xa9\xb9\x51\x52\xec\xaf\x8e\xc7\x40\xb2\x24\x61\x89\xaf\x26\xb1\x84\xb9\xbc\x1d\x9c\x1d\xf0\xef\x73\xbe\x36\xec\x67\x75\xba\x9f\x19\xed\xd8\xa2\xd4\xdc\x61\x3c\x88\xc4\xf5\xfb\xde\xb9\xcc\x10\x53\x7b\x2a\x59\xfa\xe2\xe5\xf8\xc9\x33\xcc\x04\xce\x27\xb3\xb3\x98\x23\x40\x63\x3b\x56\x82\x6b\xf2\x12\x7e\x48\x79\xe9\x9b\xaf\xbf\x7e\xf5\xcd\xe7\x4d\x5c\x71\x75\x90\xea\x4c\xd2\x1e\xb6\xcb\x54\x08\xe3\x35\x87\x7a\xef\x6a\x9f\x74\x8c\xe2\xf9\x86\xdd\xc6\xf6\x64\xbe\xb3\x57\x43\x80\x14\x0b\xf2\xdb\x0e\x1b\xaa\xdb\x8f\xb7\x6a\x08\x60\x17\x9e\xcc\x34\x53\x28\x8b\x27\x2a\xca\x50\xe6\x0d\xf3\x38\x93\x89\x7a\x96\x12\xeb\xb7\xe1\x3c\x9d\x73\x7e\xbe\x84\x97\xa4\x7c\x31\x01\xa1\xf0\x92\x96\x5a\xc5\xe3\xb8\x53\x95\xb4\x16\xa3\x8b\x5c\xac\x7f\xd2\x2b\xe2\x8a\x0a\xa8\x79\x3d\x5e\x79\xc6\x73\xde\x05\xa0\xd0\xf1\x93\x45\xed\x64\xfd\xc2\xeb\xcf\x1f\x75\xac\x87\x02\x73\xcc\xb2\xa0\x4f\xc9\x32\x41\xd8\xfb\x58\xa3\x7e\x61\x41\xd5\xeb\xf8\x93\x52\x61\x6a\x16\x7c\x12\x69\xd7\x8a\x57\x93\x0e\xe5\xb3\x0b\x84\x37\x3b\xf0\x09\xc1\xae\x6e\xd9\xd5\xdd\xb9\xc3\x54\xd5\x36\x4b\x0f\xf8\x66\x35\x65\x4b\xca\x27\xc0\xd6\x53\xf5\x02\x4e\x59\x2d\xcd\x8c\xc7\xe3\xd1\x71\x2f\x70\x57\x77\xfc\x96\xad\x2c\x3b\xdc\xe7\x1b\x07\x77\x45\x36\xb6\xc3\xca\xae\x50\x64\xe8\x79\x6b\x6c\x55\x4d\x36\xbd\xc5\xba\xad\xa8\xbc\x63\xb2\x0b\xa3\xa8\x25\xa1\xd3\xc2\x98\x80\xf6\x4a\x0d\xcb\xb6\x5e\x85\x80\x09\xb1\x2d\xff\x62\x8d\x2f\x2b\x7d\xbc\x78\x31\x6a\x8a\x80\x6a\xae\x34\xb9\x8b\x3f\xaa\x8b\x24\xfd\xa9\xdf\x72\xe9\x5f\x19\x0e\xe1\x98\x34\xa7\x0c\x25\x42\x8a\xad\x36\x86\xd7\x55\xfa\x29\x8c\x5e\xcb\x4d\x81\x65\xcd\x2f\x14\x48\x2d\xde\x98\xd4\xe7\x92\xa1\x56\x15\x82\xbb\xdf\xde\x75\xa1\x86\x33\x75\xc1\x36\x6d\xc3\xc4\x37\x47\x2a\x8c\x76\xb5\x98\xba\x5a\x3a\x88\x65\x64\x5a\x7b\x55\x4d\x5c\x94\xd9\x3c\x80\xba\xa2\xa3\xdd\x8c\x66\x54\xa5\xc9\xeb\x9d\x64\xaf\xe1\x5b\x18\x2d\xd9\x84\x10\xc8\x84\xb1\x64\x5c\x26\x4c\xd1\x95\x50\x29\xa9\xda\x7d\xc2\x78\x43\x9c\x94\x1c\xdf\x03\x17\xf5\xf5\xae\x6e\x45\x8d\xbb\xde\x71\x4e\xab\xf7\x6b\xa9\x51\xc9\x8f\x9d\x83\xa5\xd7\x79\xbf\xdc\xa6\x03\x76\xc2\x38\x68\xe3\xb2\x7a\xac\xf1\x4c\x99\x29\x49\xbb\xad\x5c\x73\x26\xcd\x08\x00\x39\xbd\xe6\x69\x41\x21\x7b\x88\x74\x69\xd4\x7e\x7f\x22\x27\x72\xb8\xc6\x12\x51\xc5\x7a\x93\x3d\xa7\xf7\x54\x85\xfa\x26\x59\x47\x61\x72\x49\xda\x33\xae\x50\x93\x35\xe9\x44\x27\x7c\xea\xc5\x1e\x3b\x7f\x22\xa3\x8b\xb6\x1b\x8f\xbb\x89\xe6\xcf\x52\xe7\xc1\xdf\xaf\x4e\x55\x57\xa4\x3e\xe7\x63\x86\x8e\x19\xa8\x37\x7d\x0e\x52\x56\x3d\xd4\x12\x05\x4d\x60\x3a\x9f\x2f\x1f\x5f\xff\xe3\xa7\xc7\xf9\xc3\x62\xfa\xf4\xb8\xf8\xe9\xdd\xf4\xed\xc3\x72\x3e\x9d\x3d\xc0\xc8\x1a\x45\x0b\x5a\x07\x10\xdd\xdc\x79\x86\x7d\xad\xd8\x33\x87\x0c\x7a\x02\x18\xb5\x3f\x09\x95\xae\x49\xd3\xaf\x0f\xe1\x72\x95\x32\xaa\xe6\xd0\xe1\x25\x17\xdf\x0b\x8e\x14\x09\x36\x36\xdd\x9a\x05\xb2\xd8\xfe\x80\x2b\x52\x87\xfb\x77\xf0\x04\xdc\xaa\x6c\x4f\x7b\x54\xaa\xc5\xe4\x0c\x9b\x76\xd7\xaa\xe7\x11\xd1\x4f\x04\xf5\x47\x23\xb2\x47\x52\xc6\xe7\xe4\xa4\x11\xbf\x38\x1d\x76\xdc\x1f\x15\x9d\x87\xdd\x93\xaf\xb2\x97\xd9\x57\x47\x34\xc2\x14\x05\xea\x6e\xb9\x7a\x56\xc6\xbc\x79\xce\xc3\x54\xfd\x8c\xfb\xe3\xbe\x66\xa7\x1f\x52\x23\xff\xfb\xf4\x69\xf6\xd7\xc6\xc1\x4e\xaa\x91\xd8\x42\x8d\xbd\x8e\x6e\x85\x13\x47\xa7\xb4\x59\x4b\x52\x79\x70\xd0\x2b\xf7\x57\x14\xe9\xe3\xc5\xe1\xdb\xc5\x21\x18\x7a\x31\xcf\x1f\x5f\x47\xc4\x83\x60\x87\x51\xdd\x20\xbf\x57\x74\x2b\x24\xfb\xe4\x4f\xe0\xc5\xa9\xa1\x5e\x8c\xfe\x1f\x00\x00\xff\xff\x2d\xc4\x59\x15\x66\x1d\x00\x00"),
		},
		"/reconciler/kabanero-cli.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kabanero-cli.yaml",
			modTime:          time.Date(2019, 8, 23, 19, 45, 29, 890913515, time.UTC),
			uncompressedSize: 2171,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\xdf\x6f\xe3\x36\x0c\xc7\xdf\xfd\x57\x10\xdd\xc3\x01\x03\xec\xee\xb0\x7b\xd8\xf9\x2d\xd7\xf5\x86\x61\x77\x5d\x90\x2b\xf6\x1a\x30\x32\x63\x6b\x95\x44\x41\xa2\x53\xf4\xfe\xfa\x41\xfe\x91\x38\xb1\xbb\x14\x9b\x5f\xaa\x8a\xd4\x97\x1f\x4a\x24\x83\x5e\xff\x45\x21\x6a\x76\x25\x1c\xde\x67\x4f\xda\x55\x25\xdc\xb1\xdb\xeb\xfa\x2b\xfa\xcc\x92\x60\x85\x82\x65\x06\xe0\xd0\x52\x09\x4f\xb8\x43\x47\x81\x73\x65\x74\x1e\xd8\x50\xae\x3a\xef\x6c\x74\xab\x03\xb7\x3e\x7e\xe6\xf0\x48\x68\xb7\x42\x51\xb6\xc9\x2d\x6e\xc7\x93\x5b\xcd\x25\xdc\x60\x65\xb5\xbb\xc9\xf2\x3c\xcf\xa6\x0c\xe8\x7d\xbc\x3d\x82\xfc\x4a\xde\xf0\x8b\x25\x27\x57\x48\xb2\xe8\x49\x25\x53\x24\x43\x4a\x38\xa4\x35\x80\x45\x51\xcd\x17\xdc\x91\x89\xfd\x06\xa4\x00\x17\x47\x01\x02\x79\xa3\x15\xc6\x12\xde\x67\x00\x42\xd6\x1b\x14\x1a\x24\x26\x71\xd3\x67\xce\xd4\x96\xf5\x00\x46\x9c\x6e\x4d\xe1\xa0\x15\xad\x94\xe2\xd6\xc9\xc3\x9c\xbd\x77\x53\xec\x04\xb5\xa3\x30\x11\xcf\x97\x52\x85\xe3\xf7\x03\x6c\xc8\x1b\x54\x04\xd2\xe8\x08\xcf\x5a\x1a\x90\x86\x60\xd7\x6a\x23\xa0\x2d\xd6\xd4\x09\x4c\x8e\x74\x9b\x27\xc1\xdb\x93\x32\x5b\x8b\xae\xca\x8d\x76\x94\x0f\xc8\xb1\xfc\xa9\xf8\x38\x39\xec\x39\xc8\x84\x2e\xf1\x1d\xa9\xd7\x1c\xa4\x84\x8f\x1f\x3e\xfc\x7c\x19\x6d\xdd\x1a\xb3\x66\xa3\xd5\x4b\x09\x2b\xf3\x8c\x2f\x71\xe2\x41\xee\x30\x15\x3c\xa5\xfc\xc7\xea\xd3\xea\xe1\x7e\xf3\xe7\xf6\xee\xcb\xef\xdb\x87\xd5\xd7\xfb\x6f\xeb\xd5\xdd\xfd\x99\x2b\xc0\x01\x4d\x4b\x9f\x03\xdb\xf2\xc2\x00\xb0\xd7\x64\xaa\x0d\xed\xe7\x96\xc1\xb6\x46\x69\xca\xe3\xf3\x16\x29\x6a\xf4\xa8\xe8\x1c\x6e\x2e\xde\xe5\xdc\xb7\xc7\xa2\xfc\x95\x36\xb9\x2c\xf8\x63\xad\x7f\xeb\xef\xfc\xbf\x15\xfa\x52\x15\x1e\x5f\x2b\x07\x1f\x58\x58\xb1\x29\xe1\xf1\x6e\x9d\x8d\x4f\x59\xc2\xf8\x5a\x82\xa1\x26\x99\x3c\xe1\x25\x65\xe0\x56\xa8\x60\x4f\x2e\x36\x7a\x2f\x85\xe6\x53\x93\x6e\x92\xed\xad\xd8\xc2\x3d\xf0\x79\xce\xcb\xf7\x96\xdc\xc7\x56\x13\x0a\x56\x3b\x94\x8e\xc6\x63\x8c\xd2\x04\x6e\xeb\x66\x4e\xba\x43\x55\x60\x2b\x0d\x07\xfd\xbd\xf3\x2f\x9e\x7e\x89\x17\xc0\xe6\x9c\x57\x05\xea\x3c\x1f\xb5\xa5\x28\x68\x7d\x09\xae\x35\x66\x39\x93\xd0\x1a\x8a\x65\x96\x03\x7a\xfd\x5b\x37\xeb\xfa\x3b\xbe\xb9\xe9\x26\x49\xe4\x36\xa4\xce\xe9\xef\x9d\xab\x54\xec\x07\x0a\xbb\x61\xa7\x26\xe9\xfe\x1a\x1d\xfb\xc5\x73\x1a\x51\x6f\x53\xeb\x2b\xc8\xa2\x8f\xdd\xbf\x63\x93\x2e\x07\xe8\x72\xa2\xb9\x70\x1a\xb0\x73\xe9\xea\x38\x68\x7b\xed\x71\x22\x92\x2c\xc8\xcf\x34\x2d\x3b\x2d\x1c\xb4\xab\x0b\xc5\x81\x38\x16\x8a\xed\x3c\xc8\x00\x3c\x78\xff\x3f\xee\x34\x46\x07\xcb\x6c\x98\xbf\x96\xd9\xed\x5e\x3b\x34\xfa\x3b\x5d\xc6\x6e\x7d\xb5\x18\x73\x54\x2e\x34\xcf\x85\xdf\xfd\xf8\xee\x5c\x25\x6d\x5c\xeb\xee\xe1\x47\xe0\x5a\xb7\x24\x99\x53\xad\x7e\xd2\xae\xd2\xae\x7e\x7b\x99\x5f\xeb\xc5\x76\xf7\x37\x29\xe9\x8a\x78\x91\x6e\xb9\xee\xd9\xd0\x30\xf0\x26\x6d\xf4\x4a\xdf\x8e\x17\xf9\x2f\xa0\xd9\x3f\x01\x00\x00\xff\xff\x0d\xd3\x5f\x86\x7b\x08\x00\x00"),
		},
		"/reconciler/kabanero-cli.yaml~": &vfsgen۰CompressedFileInfo{
			name:             "kabanero-cli.yaml~",
			modTime:          time.Date(2019, 8, 21, 1, 34, 46, 590608562, time.UTC),
			uncompressedSize: 1917,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x51\x4f\xdb\x40\x0c\x7e\xcf\xaf\xb0\xd8\x03\xd2\xa4\x14\x21\x78\x80\xbc\x15\xc6\xa6\x69\x8c\x55\x05\xed\x15\xb9\x57\xb7\x31\x5c\xce\xa7\x3b\xa7\xa8\xfc\xfa\x29\x69\x52\xd2\x26\x1d\x68\xcb\x4b\xaf\xb6\xef\xf3\x67\xdf\x67\xa3\xe7\xdf\x14\x22\x8b\xcb\x00\xbd\x8f\x27\xab\xd3\xe4\x99\xdd\x3c\x83\x2f\xe4\xad\xac\x0b\x72\x9a\x14\xa4\x38\x47\xc5\x2c\x01\x70\x58\x50\x06\xcf\x38\x43\x47\x41\x52\x63\x39\x89\x9e\x4c\xe5\x8a\x64\xc9\xa8\x84\xea\x0c\x50\xa0\x9a\xfc\x16\x67\x64\xe3\xc6\x00\x55\x82\xbd\xab\x00\x81\xbc\x65\x83\x31\x83\xd3\x04\x40\xa9\xf0\x16\x95\x1a\x88\x4e\xde\xea\xb3\x3b\x68\xc3\x78\x00\x2d\x9d\xfa\x4c\x61\xc5\x86\xc6\xc6\x48\xe9\xf4\xae\xcf\x7d\x13\x66\xc4\x29\xb2\xa3\xd0\x01\x4f\x87\x4a\x85\xed\xf7\x09\xa6\xe4\x2d\x1a\x02\xcd\x39\xc2\x0b\x6b\x0e\x9a\x13\xcc\x4a\xb6\x0a\x5c\xe0\x92\x6a\x80\xce\x95\xda\x98\x81\x78\x72\xa9\xe5\x19\x05\x5d\x67\x05\x9b\x20\x93\x20\x0b\xb6\x74\x96\x3e\xe1\x0a\x2f\xd2\x2a\xe0\xe9\xb2\x73\xd1\x4b\xd0\x0e\xb3\x8a\xdb\x96\xf1\x44\x82\x66\x70\x79\x7e\x7e\xb6\x9f\x69\x52\x5a\x3b\x11\xcb\x66\x9d\xc1\xd8\xbe\xe0\x3a\x76\x22\xc8\xad\xba\x80\x6f\xe5\xfe\x18\x5f\x8d\xef\x6e\xa6\xbf\x1e\xaf\x6f\xbf\x3f\xde\x8d\x7f\xde\xdc\x4f\xc6\xd7\x37\x3b\xa1\x00\x2b\xb4\x25\x7d\x0d\x52\x64\x7b\x0e\x80\x05\x93\x9d\x4f\x69\xd1\xf7\x34\xbe\x09\x6a\x9e\x6d\x9f\x76\x54\xf7\x28\x4d\xd3\xa4\xab\xc4\xad\x08\xef\x37\xef\xf7\x6f\x0a\x1c\x92\xc7\xb6\x95\x29\xf8\x20\x2a\x46\x6c\x06\x0f\xd7\x93\xa4\xed\x73\x06\x6d\x2b\x15\xc3\x92\xb4\xd3\xdf\x83\x2c\xa7\x52\xea\x87\x39\xaa\x6c\xd8\xed\x16\x58\x59\x06\xf5\xa6\xad\xe0\x95\x42\xc1\x0e\xb5\x4e\xed\x31\x46\xcd\x83\x94\xcb\xbc\x47\x2b\xcc\xd0\x8c\xb0\xd4\x5c\x02\xbf\xd6\xf1\xa3\xe7\x8b\x38\x62\x39\xe9\x10\xb6\xbb\x7c\x4d\xa0\x3a\xf2\x81\x0b\x8a\x8a\x85\xcf\xc0\x95\xd6\x0e\x57\x12\x4a\x4b\x31\x4b\x52\x40\xcf\xdf\x82\x94\xbe\x69\xe8\xd1\x51\x3d\xcf\x51\xca\x60\xa8\x6d\xb2\xcc\x2b\xd9\xad\x28\xcc\x1a\xcb\x92\xb4\xfe\xb5\x1c\x37\x87\x97\x6a\x51\x7c\x0c\xcd\x88\x5b\xf0\xb2\x40\x1f\xeb\xbf\xcd\x74\x1f\x48\x50\xd7\x44\x7d\xe0\x6a\xcd\xf5\xa1\xe7\xdb\x75\xb7\xc1\x6e\xf7\x12\xe9\x00\x7c\x0f\xb3\x10\xc7\x2a\x81\xdd\x72\x64\x24\x90\xc4\x91\x91\xa2\x9f\xa4\x21\xdc\x44\xff\x1f\xef\x6a\x99\x35\x9e\xde\x4a\x3d\x54\xd9\xc9\x82\x1d\x5a\x7e\xa5\xfd\xdc\xa5\x9f\x0f\xe6\x6c\x91\x47\x2c\x7d\xe0\xe3\xcf\xc7\xbb\x28\x95\xe1\xbd\x51\x6e\x56\xf1\x7b\xd3\x52\xc1\xbc\x69\xf5\x8a\xdd\x9c\xdd\xf2\xe3\x32\x7f\x6f\x16\xcb\xd9\x13\x19\xad\x45\x3c\xc8\x6e\x58\xf7\x62\xa9\xd9\x6c\x9d\x31\x3a\x30\xb7\x6d\x23\xff\x42\x34\xf9\x13\x00\x00\xff\xff\x61\xae\xac\xde\x7d\x07\x00\x00"),
		},
		"/samples": &vfsgen۰DirInfo{
			name:    "samples",
			modTime: time.Date(2019, 8, 23, 16, 31, 46, 960398542, time.UTC),
		},
		"/samples/collection.yaml": &vfsgen۰FileInfo{
			name:    "collection.yaml",
			modTime: time.Date(2019, 8, 22, 2, 24, 18, 946459812, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6a\x61\x76\x61\x2d\x6d\x69\x63\x72\x6f\x70\x72\x6f\x66\x69\x6c\x65\x0a\x73\x70\x65\x63\x3a\x0a\x20\x20\x76\x65\x72\x73\x69\x6f\x6e\x3a\x20\x30\x2e\x30\x2e\x32"),
		},
		"/samples/full.yaml": &vfsgen۰CompressedFileInfo{
			name:             "full.yaml",
			modTime:          time.Date(2019, 8, 23, 16, 31, 46, 960398542, time.UTC),
			uncompressedSize: 541,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd0\xbd\x6e\xdc\x30\x0c\x07\xf0\x5d\x4f\xf1\x07\xb2\xf6\xac\xdc\xea\x2d\x68\xb7\xae\x45\x77\x5a\xe2\x55\x44\x64\xd1\x10\x69\x5f\xf3\xf6\x45\x7c\x4e\x6a\x64\xe5\xc7\x8f\x1f\xb4\xc8\x6f\xee\x26\xda\x46\xbc\xd2\x44\x8d\xbb\x0e\xa2\x71\xbb\x52\x5d\x0a\x5d\xc3\xab\xb4\x3c\xe2\xe7\x91\x0a\x33\x3b\x65\x72\x1a\x03\xd0\x68\xe6\xff\x5d\xc1\x16\x4e\xef\xe1\x27\xfc\x2a\x8c\xa5\x92\xdf\xb4\xcf\xd8\x1e\x3c\x32\x3b\xf7\x59\x1a\x1b\xbc\x30\x32\x9b\x74\xce\x9f\xe9\x9b\x76\x50\xad\x48\x3a\x2f\xda\xb8\xb9\x7d\xc3\xb4\x3a\xbc\xa8\xf1\xae\x26\x6a\x98\x18\xba\x71\xef\x92\xb9\x41\x5a\x96\x4d\xf2\x4a\xb5\xbe\x81\x0c\x77\xae\x35\xe0\x43\x1c\xf1\x3c\x3c\x0f\xd7\x10\x80\xa4\xb5\x72\x72\xd1\x66\x23\x02\xf0\xae\xbd\xa0\x8a\x39\xf4\xf6\x98\x80\xce\x8b\x9a\xb8\x76\x61\xc3\xbd\x48\x2a\xa0\xce\x30\xa6\x9e\x0a\xe7\x7d\xbf\x93\xb3\x2b\xe7\x9e\x03\xbe\x1c\x5f\x91\x96\xd6\x89\x5c\xfb\x1e\x05\xd6\x5e\x47\x14\xf7\xc5\xc6\x18\xff\x88\x97\x75\x1a\x92\xce\xf1\xe3\x7b\x17\xd1\x78\xe2\x63\xe7\xca\x64\x6c\x31\xeb\xbd\x55\xa5\x1c\xb7\xfd\x9c\xf8\x09\x5f\xa4\x65\xfe\x3b\xbc\xd1\x5c\x8f\x19\x4f\x78\x49\x2e\x1b\x39\x1b\x08\x99\x6f\xb4\x56\x87\xf1\x7e\xe5\xd7\xdd\x01\x3a\x8a\x7f\x3c\x0a\xbf\x9f\x9f\xe4\x7d\x65\x84\x7f\x01\x00\x00\xff\xff\xc1\x27\xd0\xff\x1d\x02\x00\x00"),
		},
		"/samples/simple.yaml": &vfsgen۰FileInfo{
			name:    "simple.yaml",
			modTime: time.Date(2019, 7, 30, 17, 44, 17, 334534490, time.UTC),
			content: []byte("\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x2e\x69\x6f\x2f\x76\x31\x61\x6c\x70\x68\x61\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x6b\x61\x62\x61\x6e\x65\x72\x6f\x0a\x73\x70\x65\x63\x3a\x20\x7b\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/components.yaml"].(os.FileInfo),
		fs["/reconciler"].(os.FileInfo),
		fs["/samples"].(os.FileInfo),
	}
	fs["/reconciler"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/reconciler/appsody-operator"].(os.FileInfo),
		fs["/reconciler/kabanero-cli.yaml"].(os.FileInfo),
		fs["/reconciler/kabanero-cli.yaml~"].(os.FileInfo),
	}
	fs["/reconciler/appsody-operator"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/reconciler/appsody-operator/appsody-0.1.0.yaml"].(os.FileInfo),
	}
	fs["/samples"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/samples/collection.yaml"].(os.FileInfo),
		fs["/samples/full.yaml"].(os.FileInfo),
		fs["/samples/simple.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
